import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.layers import GlobalAveragePooling2D
import numpy as np
import os

# ‚úÖ 1. ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
MODEL_PATH = "resnet50_final_model_v2_edit_1.keras"

try:
    model = load_model(MODEL_PATH)
    model.build(input_shape=(None, 224, 224, 3))  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Input Shape
    print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
except Exception as e:
    print(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    exit()

# ‚úÖ 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
print("\nüîç ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•:")
for layer in model.layers:
    print(f"- {layer.name}: {layer}")

# ‚úÖ 3. ‡∏î‡∏∂‡∏á ResNet50 ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° GlobalAveragePooling2D
try:
    resnet_base = model.get_layer("resnet50")  # ‡∏î‡∏∂‡∏á ResNet50 ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
    feature_extractor = tf.keras.Sequential([
        resnet_base,
        GlobalAveragePooling2D()  # ‡πÄ‡∏û‡∏¥‡πà‡∏° Global Average Pooling ‡πÄ‡∏≠‡∏á
    ])
    print("‚úÖ ‡πÉ‡∏ä‡πâ GlobalAveragePooling2D ‡πÄ‡∏õ‡πá‡∏ô Feature Extractor")
except Exception as e:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏´‡∏ô‡∏î feature_extractor: {e}")
    exit()

# ‚úÖ 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Feature Extractor ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
dummy_input = np.zeros((1, 224, 224, 3))
output = feature_extractor.predict(dummy_input, verbose=0)
print(f"‚úÖ Test Feature Extractor Shape: {output.shape}")  # ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ (1, 2048)

# ‚úÖ 5. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏ò‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Train + Augmented)
image_folder = "D:/AI-and-API-Celeb/Data_Image_celeb/DataTrain"
image_size = (224, 224)

feature_list = []
label_list = []

# ‚úÖ 6. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏∏‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢ (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•)
for person_name in os.listdir(image_folder):
    person_folder = os.path.join(image_folder, person_name)

    if os.path.isdir(person_folder):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        print(f"üìÇ Processing: {person_name}")

        for filename in os.listdir(person_folder):
            if filename.lower().endswith((".jpg", ".png")):  # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö .JPG .PNG
                img_path = os.path.join(person_folder, filename)

                try:
                    # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û
                    img = tf.keras.preprocessing.image.load_img(img_path, target_size=image_size)
                    img_array = tf.keras.preprocessing.image.img_to_array(img)
                    img_array = tf.keras.applications.resnet50.preprocess_input(img_array)
                    img_array = np.expand_dims(img_array, axis=0)

                    # ‚úÖ ‡πÉ‡∏ä‡πâ feature_extractor ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
                    feature = feature_extractor.predict(img_array, verbose=0)[0]
                    feature_list.append(feature)

                    # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô Label
                    label_list.append(person_name)

                except Exception as e:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ {filename}: {e}")

# ‚úÖ 7. ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô NumPy Array
feature_database = np.array(feature_list)
label_database = np.array(label_list)

# ‚úÖ 8. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô `.npy`
np.save("feature_database.npy", feature_database)
np.save("label_database.npy", label_database)

# ‚úÖ 9. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á `feature_database.npy` ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ç‡∏ô‡∏≤‡∏î: {feature_database.shape}")  # ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô (N, 2048)
print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á `label_database.npy` ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ç‡∏ô‡∏≤‡∏î: {label_database.shape}")  # ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô (N,)
